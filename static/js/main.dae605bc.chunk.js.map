{"version":3,"sources":["components/SearchInput/index.tsx","components/Card/index.tsx","components/PhotoList/index.tsx","components/Modal/index.tsx","App/index.tsx","serviceWorker.js","index.tsx"],"names":["SearchInput","page","query","setQuery","setUrl","setResultHeader","onSubmit","event","preventDefault","process","REACT_APP_CLIENT_ID","className","type","src","alt","width","value","onChange","target","placeholder","Card","classes","imgSrc","imgDetails","setShowModal","setPhotoDetails","onClick","data","handleShowModal","name","location","PhotoList","num","isLoading","Array","map","elm","index","key","photos","results","photo","urls","regular","user","Modal","photoDetails","App","useState","setData","Math","floor","random","url","setIsLoading","isResultHeader","showModal","useEffect","a","axios","result","fetchData","console","log","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dae605bc.chunk.js","sourcesContent":["import React from 'react'\n\ninterface SearchInputProps {\n    page: number\n    query: string\n    setQuery: React.Dispatch<React.SetStateAction<string>>\n    setUrl: React.Dispatch<React.SetStateAction<string>>\n    setResultHeader: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst SearchInput = ({\n    page,\n    query,\n    setQuery,\n    setUrl,\n    setResultHeader\n}: SearchInputProps) => (\n    <form\n        onSubmit={event => {\n            event.preventDefault()\n            setResultHeader(true)\n            setUrl(\n                `https://api.unsplash.com/search/photos/?client_id=${process.env.REACT_APP_CLIENT_ID}&page=${page}&per_page=11&query=${query}`\n            )\n        }}\n        className=\"header-form\"\n    >\n        <button type=\"submit\" className=\"submit-btn\">\n            <img src=\"./search.svg\" alt=\"search-icon\" width=\"20\" />\n        </button>\n        <input\n            type=\"text\"\n            value={query}\n            onChange={event => setQuery(event.target.value)}\n            className=\"form-control\"\n            placeholder=\"Search for photo\"\n        />\n    </form>\n)\n\nexport default SearchInput\n","import React from 'react'\n\ninterface CardProps {\n    classes?: string\n    imgSrc?: string\n    imgDetails?: {\n        name: string\n        location: string\n    }\n    setShowModal?: React.Dispatch<React.SetStateAction<boolean>>\n    setPhotoDetails?: React.Dispatch<\n        React.SetStateAction<{\n            imgSrc: string\n            imgDetails: {\n                name: string\n                location: string\n            }\n        }>\n    >\n}\n\ninterface dataType {\n    imgSrc: string\n    imgDetails: object | undefined\n}\n\nconst Card = ({\n    classes,\n    imgSrc,\n    imgDetails,\n    setShowModal,\n    setPhotoDetails\n}: CardProps) => {\n    const handleShowModal = (\n        imgSrc: string,\n        imgDetails: {\n            name: string\n            location: string\n        }\n    ) => {\n        const data = {\n            imgSrc,\n            imgDetails\n        }\n        setShowModal && setShowModal(true)\n        setPhotoDetails && setPhotoDetails(data)\n    }\n\n    return (\n        <div\n            className={`card ${classes}`}\n            onClick={() => handleShowModal(imgSrc!, imgDetails!)}\n        >\n            {imgSrc && (\n                <div className=\"card--image-wrap\">\n                    <img src={imgSrc} alt=\"Unsplash\" />\n                </div>\n            )}\n            {imgDetails && (\n                <div className=\"card--info\">\n                    <h4>{imgDetails.name}</h4>\n                    <p>{imgDetails.location}</p>\n                </div>\n            )}\n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from '../Card'\n\ninterface PhotoListProps {\n    data: any\n    isLoading: boolean\n    setShowModal: React.Dispatch<React.SetStateAction<boolean>>\n    setPhotoDetails: React.Dispatch<\n        React.SetStateAction<{\n            imgSrc: string\n            imgDetails: {\n                name: string\n                location: string\n            }\n        }>\n    >\n}\n\nconst renderSkeletonLoader = (num: number) => {\n    const skeleton = [...Array(num)].map((elm, index) => <Card key={index} />)\n\n    return skeleton\n}\n\nconst PhotoList = ({\n    data,\n    isLoading,\n    setShowModal,\n    setPhotoDetails\n}: PhotoListProps) => (\n    <section className=\"photo-list-container\">\n        <div className=\"photo-list\">\n            {isLoading\n                ? renderSkeletonLoader(4)\n                : data.photos.results &&\n                  data.photos.results.map((photo: any, index: number) => (\n                      <Card\n                          key={index}\n                          imgSrc={photo.urls.regular}\n                          imgDetails={photo.user}\n                          setShowModal={setShowModal}\n                          setPhotoDetails={setPhotoDetails}\n                      />\n                  ))}\n        </div>\n    </section>\n)\n\nexport default PhotoList\n","import React from 'react'\n\ninterface ModalProps {\n    photoDetails: {\n        imgSrc: string\n        imgDetails: {\n            name: string\n            location: string\n        }\n    }\n    setShowModal?: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst Modal = ({ photoDetails, setShowModal }: ModalProps) => {\n    return (\n        <div className=\"modal-container\">\n            <div className=\"modal-dialogue\">\n                <div className=\"modal-dialogue--inner\">\n                    <div className=\"modal-dialogue--image\">\n                        <img src={photoDetails.imgSrc} alt=\"\" />\n                    </div>\n                    <div className=\"modal-dialogue--caption\">\n                        <h4>{photoDetails.imgDetails.name}</h4>\n                        <p>{photoDetails.imgDetails.location}</p>\n                    </div>\n                </div>\n                <div\n                    className=\"modal-dialogue--inner--close\"\n                    onClick={() => setShowModal && setShowModal(false)}\n                >\n                    X\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport SearchInput from '../components/SearchInput'\nimport PhotoList from '../components/PhotoList'\nimport Modal from '../components/Modal'\n\nconst App = () => {\n    const [data, setData] = useState({ photos: [] })\n    const [query, setQuery] = useState('')\n    const page = Math.floor(Math.random() * 10)\n    const [url, setUrl] = useState(\n        `https://api.unsplash.com/search/photos/?client_id=${process.env.REACT_APP_CLIENT_ID}&page=${page}&per_page=11&query=african`\n    )\n    const [isLoading, setIsLoading] = useState(false)\n    const [isResultHeader, setResultHeader] = useState(false)\n    const [showModal, setShowModal] = useState(false)\n    const [photoDetails, setPhotoDetails] = useState({\n        imgSrc: '',\n        imgDetails: {\n            name: '',\n            location: ''\n        }\n    })\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsLoading(true)\n            const result = await axios(url)\n            setData({ photos: result.data })\n            setIsLoading(false)\n        }\n        fetchData()\n    }, [url])\n\n    const RenderSearchResultHeader = () => (\n        <div className=\"result-header\">\n            <p>\n                Search Results for <span>\"{query}\"</span>\n            </p>\n        </div>\n    )\n\n    console.log('Hello, i am here', photoDetails)\n\n    return (\n        <div className=\"app-container\">\n            <header className=\"header\">\n                {isResultHeader ? (\n                    <RenderSearchResultHeader />\n                ) : (\n                    <SearchInput\n                        page={page}\n                        query={query}\n                        setQuery={setQuery}\n                        setUrl={setUrl}\n                        setResultHeader={setResultHeader}\n                    />\n                )}\n            </header>\n            {\n                <PhotoList\n                    data={data}\n                    isLoading={isLoading}\n                    setShowModal={setShowModal}\n                    setPhotoDetails={setPhotoDetails}\n                />\n            }\n            {showModal && photoDetails && (\n                <Modal\n                    photoDetails={photoDetails}\n                    setShowModal={setShowModal}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}